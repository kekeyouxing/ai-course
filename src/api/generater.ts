import instance from '@/api/axios';

interface ApiResponse<T> {
  code: number;
  data: T;
  msg: string;
}

interface CheckVideoGenerationResponse {
  errors: string[];
  hasErrors: boolean;
}

/**
 * Checks if a video can be generated by validating the current project state
 * @param projectId The ID of the project to check
 * @returns An object with error messages and a flag indicating if there are errors
 */
export async function checkVideoGeneration(projectId: string): Promise<CheckVideoGenerationResponse> {
  try {
    const response = await instance.post<ApiResponse<CheckVideoGenerationResponse>>(
      `/video-tasks/${projectId}/check`
    );
    
    // Access the nested data structure
    return response.data.data;
  } catch (error) {
    console.error("Error checking video generation:", error);
    return {
      errors: ["服务器连接错误，请稍后再试"],
      hasErrors: true
    };
  }
}

/**
 * Initiates the video generation process
 * @param projectId The ID of the project to generate
 * @returns Success status of the operation
 */
export async function generateVideo(projectId: string, enableSubtitle: boolean = false): Promise<{success: boolean, msg?: string}> {
  try {
    const response = await instance.post<ApiResponse<any>>(`/video-tasks/${projectId}/generate`, {
      enableSubtitle
    });
    return {
      success: response.data.code === 0,
      msg: response.data.msg
    };
  } catch (error) {
    console.error("Error generating video:", error);
    return {
      success: false,
      msg: "网络请求失败"
    };
  }
}
